#+title: nixos-bootstrap
#+startup: showall

* About the project
** What
it's mostly simplified instructions in the readme. not trying to understand or explain everything. windows user mostly. just going to dumbly follow instructions until i get it to work.

bootstrap in the sense that this seems to be the minimum you need to get started working with your configs in flakes

** Why
for my own reference, for posterity, because I like to have a solid starting point, it makes my brain feel good, in order to recreate my nixos systems
** By whom
i can't remember the guides i used for formatting/partitioning
pretty sure i used the nixos manual. latest version is https://nixos.org/manual/nixos/stable/index.html#nixos-manual

had some help: https://www.youtube.com/watch?v=AGVXJ-TIv3Y

learning how to use org files as readme: https://github.com/tgbugs/orgstrap/blob/master/README.org
** For whom

** How to use
probably just follow the readme
** How to contribute

* Contents
* Hardware setup
** Hyper-V
* NixOS setup
start out as nixos user with no password
this is just an example to follow along with, you may need to use different values for memory, etc...

** partitioning
sudo everything, probably:
parted -l (list disks)
parted [disk name]
parted mklabel gpt (make partition table)
parted print (show table)
- note partition sizes are debatable. nixos wants 512 for boot, and with 8GB ram i'm going with 4GB swap on 32GB hard disk (at the end). the rest is the root partition
mkpart primary 512MB 28GB
mkpart primary linux-swap 28GiB 100%
mkpart ESP fat32 1MiB 512MiB
set 3 esp on
** formatting
sudo:
mkfs.ext4 -L nixos /dev/sda1
mkswap -L swap /dev/sda2
mkfs.fat -F 32 -n boot /dev/sda3
** install from iso
sudo:
mount /dev/disk/by-label/nixos /mnt
mkdir -p /mnt/boot
mount /dev/disk/by-label/boot /mnt/boot
swapon /dev/sda2
nixos-generate-config --root /mnt
might need to do some network config (
nixos-install
** minimal configuration
*** minimal config to get flakes
start with generated configuration.nix
nixos-generate-config --force (will destroy existing config, which is fine if we are using my config)


curl -o /etc/nixos/configuration.nix -H "Accept:application/vnd.github.v3.raw" https://api.github.com/repos/jessenieboer/nixos-bootstrap/contents/configuration.nix?ref=master 

then nixos-rebuild switch (this gives us flakes)

sometimes the server gives you "error: unable to download" and you have to keep retrying
*** minimal config via flake
make your own directory for your configs, then cd to it
mkdir <name>
cd <name>

cp etc/nixos/*.nix .

curl -o flake.nix -H
"Accept:application/vnd.github.v3.raw" https://api.github.com/repos/jessenieboer/nixos-bootstrap/contents/flake.nix?ref=master



nixos-rebuild switch --flake .#minimal
** further config
*** from scratch
*** getting existing configs from githup
add enough config stuff to push it to a remote if you want (i'm using github)
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

can remove this ssh key later and make a new one when the user configs are set up correctly in future configurations

* ip-factory
- put together combinations of the different scopes to get the machine you want (dev machine, build server, general computing, etc...)
- generally one flake per "module" so they can be used as separate inputs
- a machine is not the same as an ip-factory
** ideological scope
no real nix stuff needed
** hardware/infrastructure/os/system
- nixos configs contained in a flake (note that flake = a set of inputs and outputs)
- configs tied to hardware, so config per hardware setup, perhaps with varying infrastructure? (laptop hyper v, desktop hyper v, old laptop, etc...)
- either different flakes for different hardware, or one flake per "owner" of the hardware, i.e. a flake per kingdom (my machines, vermeer machines, etc...)
** platform/technology/maybe purpose
- haskell flake, python flake, etc... (dev, test, run?)
- perhaps a haskell flake, then sub-flakes for haskell dev and test and run?
** product/project
- my project (dev, test, run?)
- dotfiles
** team/user
- home manager for user
- not sure about team
- dotfiles
